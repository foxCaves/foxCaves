[{"/Users/doridian/Programming/foxCaves/site/frontend/src/app.tsx":"1","/Users/doridian/Programming/foxCaves/site/frontend/src/components/liveloading.tsx":"2","/Users/doridian/Programming/foxCaves/site/frontend/src/components/route.tsx":"3","/Users/doridian/Programming/foxCaves/site/frontend/src/components/storage_use.tsx":"4","/Users/doridian/Programming/foxCaves/site/frontend/src/components/user_inactive_alert.tsx":"5","/Users/doridian/Programming/foxCaves/site/frontend/src/index.tsx":"6","/Users/doridian/Programming/foxCaves/site/frontend/src/models/base.ts":"7","/Users/doridian/Programming/foxCaves/site/frontend/src/models/file.ts":"8","/Users/doridian/Programming/foxCaves/site/frontend/src/models/link.ts":"9","/Users/doridian/Programming/foxCaves/site/frontend/src/models/user.ts":"10","/Users/doridian/Programming/foxCaves/site/frontend/src/pages/account.tsx":"11","/Users/doridian/Programming/foxCaves/site/frontend/src/pages/email/code.tsx":"12","/Users/doridian/Programming/foxCaves/site/frontend/src/pages/email/forgot_password.tsx":"13","/Users/doridian/Programming/foxCaves/site/frontend/src/pages/files.tsx":"14","/Users/doridian/Programming/foxCaves/site/frontend/src/pages/home.tsx":"15","/Users/doridian/Programming/foxCaves/site/frontend/src/pages/links.tsx":"16","/Users/doridian/Programming/foxCaves/site/frontend/src/pages/livedraw/manager.ts":"17","/Users/doridian/Programming/foxCaves/site/frontend/src/pages/livedraw/page.tsx":"18","/Users/doridian/Programming/foxCaves/site/frontend/src/pages/login.tsx":"19","/Users/doridian/Programming/foxCaves/site/frontend/src/pages/logout.tsx":"20","/Users/doridian/Programming/foxCaves/site/frontend/src/pages/register.tsx":"21","/Users/doridian/Programming/foxCaves/site/frontend/src/pages/view.tsx":"22","/Users/doridian/Programming/foxCaves/site/frontend/src/react-app-env.d.ts":"23","/Users/doridian/Programming/foxCaves/site/frontend/src/setupProxy.ts":"24","/Users/doridian/Programming/foxCaves/site/frontend/src/utils/api.ts":"25","/Users/doridian/Programming/foxCaves/site/frontend/src/utils/context.ts":"26","/Users/doridian/Programming/foxCaves/site/frontend/src/utils/file_uploader.ts":"27","/Users/doridian/Programming/foxCaves/site/frontend/src/utils/formatting.ts":"28","/Users/doridian/Programming/foxCaves/site/frontend/src/utils/hooks.ts":"29","/Users/doridian/Programming/foxCaves/site/frontend/src/utils/misc.ts":"30","/Users/doridian/Programming/foxCaves/site/frontend/src/utils/random.ts":"31","/Users/doridian/Programming/foxCaves/site/frontend/src/utils/websocket_autoreconnect.ts":"32"},{"size":7611,"mtime":1677044479373,"results":"33","hashOfConfig":"34"},{"size":7871,"mtime":1677272366128,"results":"35","hashOfConfig":"34"},{"size":2171,"mtime":1677044479374,"results":"36","hashOfConfig":"34"},{"size":975,"mtime":1677044479374,"results":"37","hashOfConfig":"34"},{"size":1878,"mtime":1677273512989,"results":"38","hashOfConfig":"34"},{"size":729,"mtime":1677044479374,"results":"39","hashOfConfig":"34"},{"size":387,"mtime":1677272150767,"results":"40","hashOfConfig":"34"},{"size":1726,"mtime":1677045267676,"results":"41","hashOfConfig":"34"},{"size":1455,"mtime":1677273465136,"results":"42","hashOfConfig":"34"},{"size":1537,"mtime":1677272458241,"results":"43","hashOfConfig":"34"},{"size":8185,"mtime":1677273312561,"results":"44","hashOfConfig":"34"},{"size":1463,"mtime":1677273172013,"results":"45","hashOfConfig":"34"},{"size":2934,"mtime":1677273176860,"results":"46","hashOfConfig":"34"},{"size":9938,"mtime":1677273142370,"results":"47","hashOfConfig":"34"},{"size":944,"mtime":1677044479377,"results":"48","hashOfConfig":"34"},{"size":7243,"mtime":1677272082920,"results":"49","hashOfConfig":"34"},{"size":40792,"mtime":1677272659954,"results":"50","hashOfConfig":"34"},{"size":5609,"mtime":1677271484967,"results":"51","hashOfConfig":"34"},{"size":3586,"mtime":1677271799392,"results":"52","hashOfConfig":"34"},{"size":1627,"mtime":1677271789040,"results":"53","hashOfConfig":"34"},{"size":4826,"mtime":1677044479380,"results":"54","hashOfConfig":"34"},{"size":4056,"mtime":1677271755692,"results":"55","hashOfConfig":"34"},{"size":40,"mtime":1642105385389,"results":"56","hashOfConfig":"34"},{"size":675,"mtime":1677045901255,"results":"57","hashOfConfig":"34"},{"size":1430,"mtime":1677271666377,"results":"58","hashOfConfig":"34"},{"size":341,"mtime":1677044479381,"results":"59","hashOfConfig":"34"},{"size":2746,"mtime":1677271636945,"results":"60","hashOfConfig":"34"},{"size":703,"mtime":1677044479382,"results":"61","hashOfConfig":"34"},{"size":842,"mtime":1677044479382,"results":"62","hashOfConfig":"34"},{"size":200,"mtime":1677045991041,"results":"63","hashOfConfig":"34"},{"size":454,"mtime":1677044479382,"results":"64","hashOfConfig":"34"},{"size":1649,"mtime":1677271605633,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"vu71uv",{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":28,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/doridian/Programming/foxCaves/site/frontend/src/app.tsx",[],[],"/Users/doridian/Programming/foxCaves/site/frontend/src/components/liveloading.tsx",[],["163"],"/Users/doridian/Programming/foxCaves/site/frontend/src/components/route.tsx",[],[],"/Users/doridian/Programming/foxCaves/site/frontend/src/components/storage_use.tsx",[],[],"/Users/doridian/Programming/foxCaves/site/frontend/src/components/user_inactive_alert.tsx",[],[],"/Users/doridian/Programming/foxCaves/site/frontend/src/index.tsx",[],["164"],"/Users/doridian/Programming/foxCaves/site/frontend/src/models/base.ts",[],[],"/Users/doridian/Programming/foxCaves/site/frontend/src/models/file.ts",[],[],"/Users/doridian/Programming/foxCaves/site/frontend/src/models/link.ts",[],[],"/Users/doridian/Programming/foxCaves/site/frontend/src/models/user.ts",[],[],"/Users/doridian/Programming/foxCaves/site/frontend/src/pages/account.tsx",[],[],"/Users/doridian/Programming/foxCaves/site/frontend/src/pages/email/code.tsx",[],[],"/Users/doridian/Programming/foxCaves/site/frontend/src/pages/email/forgot_password.tsx",[],[],"/Users/doridian/Programming/foxCaves/site/frontend/src/pages/files.tsx",[],[],"/Users/doridian/Programming/foxCaves/site/frontend/src/pages/home.tsx",[],[],"/Users/doridian/Programming/foxCaves/site/frontend/src/pages/links.tsx",[],[],"/Users/doridian/Programming/foxCaves/site/frontend/src/pages/livedraw/manager.ts",["165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192"],["193","194","195","196","197","198","199","200","201"],"/* eslint-disable no-case-declarations */\n/* eslint-disable max-lines */\nimport { FileModel } from '../../models/file';\n\nconst MathPIDouble = Math.PI * 2;\n\nconst MAX_BRUSH_WIDTH = 200;\n\nenum PaintEvent {\n    WIDTH = 'w',\n    COLOR = 'c',\n    BRUSH = 'b',\n    MOUSE_UP = 'u',\n    MOUSE_DOWN = 'd',\n    MOUSE_MOVE = 'm',\n    MOUSE_CURSOR = 'p',\n    CUSTOM = 'x',\n    RESET = 'r',\n    JOIN = 'j',\n    LEAVE = 'l',\n    ERROR = 'e',\n    IMG_BURST = 'i',\n    MOUSE_DOUBLE_CLICK = 'F',\n}\n\ninterface CursorData {\n    x: number;\n    y: number;\n    lastX: number;\n    lastY: number;\n}\n\ninterface BrushData {\n    width: number;\n    color: string;\n    brush: Brush;\n    customData: Record<string, Record<string, unknown>>;\n}\n\ninterface User {\n    brushData: BrushData;\n    cursorData: CursorData;\n    local: boolean;\n}\n\ninterface LocalUserBrushData extends BrushData {\n    setBrushAttribsLocal(): void;\n    setColor(col: string): void;\n    setWidth(width: number): void;\n    setBrush(name: string): void;\n}\n\ninterface LocalUser extends User {\n    brushData: LocalUserBrushData;\n    local: true;\n}\n\ninterface RemotePaintUser extends User {\n    name: string;\n}\n\nconst paintUsers: Record<string, RemotePaintUser> = {};\n\ninterface Brush {\n    active?: boolean;\n    usesCustomData?: boolean;\n    keepLineWidth?: boolean;\n    keepBackgroundStrokeStyle?: boolean;\n    defaultCustomData?: Record<string, string>;\n    select(\n        manager: LiveDrawManager,\n        user: User,\n        foregroundCanvasCTX: CanvasRenderingContext2D,\n        backgroundCanvasCTX: CanvasRenderingContext2D,\n    ): void;\n    down(manager: LiveDrawManager, x: number, y: number, user: User): void;\n    up(manager: LiveDrawManager, x: number, y: number, user: User, backgroundCanvasCTX: CanvasRenderingContext2D): void;\n    move(\n        manager: LiveDrawManager,\n        x: number,\n        y: number,\n        user: User,\n        backgroundCanvasCTX: CanvasRenderingContext2D,\n    ): boolean | undefined;\n    preview(\n        manager: LiveDrawManager,\n        x: number,\n        y: number,\n        user: User,\n        foregroundCanvasCTX: CanvasRenderingContext2D,\n    ): void;\n    setup?(manager: LiveDrawManager, user: User): void;\n    doubleClick?(\n        manager: LiveDrawManager,\n        x: number,\n        y: number,\n        user: User,\n        backgroundCanvasCTX: CanvasRenderingContext2D,\n    ): void;\n    unselectLocal?(): void;\n    selectLocal?(\n        manager: LiveDrawManager,\n        user: User,\n        foregroundCanvasCTX: CanvasRenderingContext2D,\n        backgroundCanvasCTX: CanvasRenderingContext2D,\n    ): void;\n}\n\ninterface Vertex {\n    x: number;\n    y: number;\n}\n\nconst paintBrushes: Record<string, Brush> = {\n    rectangle: {\n        select(manager, user, foregroundCanvasCTX, backgroundCanvasCTX) {\n            backgroundCanvasCTX.lineCap = 'butt';\n            foregroundCanvasCTX.lineWidth = user.brushData.width * manager.scaleFactor;\n        },\n        down(_manager, x, y, user) {\n            user.cursorData.lastX = x;\n            user.cursorData.lastY = y;\n            this.active = true;\n        },\n        up(_manager, x, y, user, backgroundCanvasCTX) {\n            if (user.cursorData.lastX === x && user.cursorData.lastY === y) {\n                x++;\n                y++;\n            }\n\n            backgroundCanvasCTX.strokeStyle = user.brushData.color;\n            backgroundCanvasCTX.strokeRect(x, y, user.cursorData.lastX - x, user.cursorData.lastY - y);\n            this.active = false;\n        },\n        move() {\n            return true;\n        },\n        preview(_manager, x, y, user, foregroundCanvasCTX) {\n            if (!this.active) return;\n            foregroundCanvasCTX.strokeRect(x, y, user.cursorData.lastX - x, user.cursorData.lastY - y);\n        },\n    },\n    circle: {\n        select(manager, user, foregroundCanvasCTX, backgroundCanvasCTX) {\n            backgroundCanvasCTX.lineCap = 'butt';\n            foregroundCanvasCTX.lineWidth = user.brushData.width * manager.scaleFactor;\n        },\n        down(_manager, x, y, user) {\n            this.active = true;\n            user.cursorData.lastX = x;\n            user.cursorData.lastY = y;\n        },\n        up(_manager, x, y, user, backgroundCanvasCTX) {\n            if (user.cursorData.lastX === x && user.cursorData.lastY === y) {\n                x++;\n                y++;\n            }\n\n            backgroundCanvasCTX.strokeStyle = user.brushData.color;\n\n            backgroundCanvasCTX.beginPath();\n            x = user.cursorData.lastX - x;\n            y = user.cursorData.lastY - y;\n            backgroundCanvasCTX.arc(\n                user.cursorData.lastX,\n                user.cursorData.lastY,\n                Math.sqrt(x * x + y * y),\n                0,\n                MathPIDouble,\n                false,\n            );\n\n            backgroundCanvasCTX.stroke();\n            this.active = false;\n        },\n        move() {\n            return true;\n        },\n        preview(_manager, x, y, user, foregroundCanvasCTX) {\n            if (!this.active) {\n                return;\n            }\n\n            const radius = Math.sqrt(x * x + y * y);\n\n            foregroundCanvasCTX.font = '10px Verdana';\n            foregroundCanvasCTX.fillText(`Radius: ${radius}px`, user.cursorData.lastX, user.cursorData.lastY);\n\n            foregroundCanvasCTX.beginPath();\n            x = user.cursorData.lastX - x;\n            y = user.cursorData.lastY - y;\n            foregroundCanvasCTX.arc(\n                user.cursorData.lastX,\n                user.cursorData.lastY,\n                Math.sqrt(x * x + y * y),\n                0,\n                MathPIDouble,\n                false,\n            );\n\n            foregroundCanvasCTX.stroke();\n        },\n    },\n    brush: {\n        keepLineWidth: true,\n        select(manager, _user, foregroundCanvasCTX) {\n            foregroundCanvasCTX.lineWidth = 1 / manager.scaleFactor;\n        },\n        down(_manager, x, y, user) {\n            user.cursorData.lastX = x;\n            user.cursorData.lastY = y;\n        },\n        up(manager, x, y, user, backgroundCanvasCTX) {\n            if (user.cursorData.lastX === x && user.cursorData.lastY === y) {\n                x++;\n                y++;\n            }\n\n            this.move(manager, x, y, user, backgroundCanvasCTX);\n        },\n        move(_manager, x, y, user, backgroundCanvasCTX): undefined {\n            backgroundCanvasCTX.lineCap = 'round';\n            backgroundCanvasCTX.strokeStyle = user.brushData.color;\n\n            backgroundCanvasCTX.beginPath();\n            backgroundCanvasCTX.moveTo(user.cursorData.lastX, user.cursorData.lastY);\n            backgroundCanvasCTX.lineTo(x, y);\n            backgroundCanvasCTX.stroke();\n            user.cursorData.lastX = x;\n            user.cursorData.lastY = y;\n            return undefined;\n        },\n        preview(manager, x, y, user, foregroundCanvasCTX) {\n            foregroundCanvasCTX.beginPath();\n            foregroundCanvasCTX.arc(x, y, (user.brushData.width / 2) * manager.scaleFactor, 0, MathPIDouble);\n            foregroundCanvasCTX.stroke();\n        },\n    },\n    erase: {\n        keepLineWidth: true,\n        select(manager, _user, foregroundCanvasCTX) {\n            foregroundCanvasCTX.lineWidth = 1 / manager.scaleFactor;\n            foregroundCanvasCTX.strokeStyle = 'black';\n        },\n        down(_manager, x, y, user) {\n            user.cursorData.lastX = x;\n            user.cursorData.lastY = y;\n        },\n        up(manager, x, y, user, backgroundCanvasCTX) {\n            if (user.cursorData.lastX === x && user.cursorData.lastY === y) {\n                x++;\n                y++;\n            }\n\n            this.move(manager, x, y, user, backgroundCanvasCTX);\n        },\n        move(_manager, x, y, user, backgroundCanvasCTX) {\n            backgroundCanvasCTX.lineCap = 'round';\n            backgroundCanvasCTX.globalCompositeOperation = 'destination-out';\n\n            backgroundCanvasCTX.beginPath();\n            backgroundCanvasCTX.moveTo(user.cursorData.lastX, user.cursorData.lastY);\n            backgroundCanvasCTX.lineTo(x, y);\n            backgroundCanvasCTX.stroke();\n            user.cursorData.lastX = x;\n            user.cursorData.lastY = y;\n            return undefined;\n        },\n        preview(manager, x, y, user, foregroundCanvasCTX) {\n            foregroundCanvasCTX.beginPath();\n            foregroundCanvasCTX.arc(x, y, (user.brushData.width / 2) * manager.scaleFactor, 0, MathPIDouble);\n            foregroundCanvasCTX.stroke();\n        },\n    },\n    restore: {\n        keepLineWidth: true,\n        keepBackgroundStrokeStyle: true,\n        select(manager, _user, foregroundCanvasCTX) {\n            foregroundCanvasCTX.lineWidth = 1 / manager.scaleFactor;\n            foregroundCanvasCTX.strokeStyle = 'black';\n        },\n        down(_manager, x, y, user) {\n            user.cursorData.lastX = x;\n            user.cursorData.lastY = y;\n        },\n        up(manager, x, y, user, backgroundCanvasCTX) {\n            if (user.cursorData.lastX === x && user.cursorData.lastY === y) {\n                x++;\n                y++;\n            }\n\n            this.move(manager, x, y, user, backgroundCanvasCTX);\n        },\n        move(manager, x, y, user, backgroundCanvasCTX) {\n            backgroundCanvasCTX.strokeStyle = manager.imagePattern!;\n            backgroundCanvasCTX.lineWidth = user.brushData.width * manager.scaleFactor;\n            backgroundCanvasCTX.lineCap = 'round';\n\n            backgroundCanvasCTX.beginPath();\n            backgroundCanvasCTX.moveTo(user.cursorData.lastX, user.cursorData.lastY);\n            backgroundCanvasCTX.lineTo(x, y);\n            backgroundCanvasCTX.stroke();\n            user.cursorData.lastX = x;\n            user.cursorData.lastY = y;\n            return undefined;\n        },\n        preview(manager, x, y, user, foregroundCanvasCTX) {\n            foregroundCanvasCTX.beginPath();\n            foregroundCanvasCTX.arc(x, y, (user.brushData.width / 2) * manager.scaleFactor, 0, MathPIDouble);\n            foregroundCanvasCTX.stroke();\n        },\n    },\n    line: {\n        select(_manager, user, foregroundCanvasCTX) {\n            foregroundCanvasCTX.lineWidth = user.brushData.width;\n        },\n        down(_manager, x, y, user) {\n            user.cursorData.lastX = x;\n            user.cursorData.lastY = y;\n            this.active = true;\n        },\n        up(_manager, x, y, user, backgroundCanvasCTX) {\n            if (user.cursorData.lastX === x && user.cursorData.lastY === y) {\n                x++;\n                y++;\n            }\n\n            backgroundCanvasCTX.lineCap = 'butt';\n            backgroundCanvasCTX.beginPath();\n            backgroundCanvasCTX.moveTo(user.cursorData.lastX, user.cursorData.lastY);\n            backgroundCanvasCTX.lineTo(x, y);\n            backgroundCanvasCTX.stroke();\n            this.active = false;\n        },\n        move() {\n            return true;\n        },\n        preview(_manager, x, y, user, foregroundCanvasCTX) {\n            if (!this.active) return;\n            foregroundCanvasCTX.beginPath();\n            foregroundCanvasCTX.moveTo(user.cursorData.lastX, user.cursorData.lastY);\n            foregroundCanvasCTX.lineTo(x, y);\n            foregroundCanvasCTX.stroke();\n            return true;\n        },\n    },\n    /*\n     * TODO\n     * text: {\n     *  keepLineWidth: true,\n     *  usesCustomData: true,\n     *  defaultCustomData: {\n     *      text: '',\n     *      font: 'Verdana',\n     *  },\n     *  setup(user) {\n     *      if (user !== localUser) return;\n     *      // TODO: This should really not be here...\n     *      const textInput = document.getElementById('live-draw-text-input') as HTMLInputElement;\n     *      const fontInput = document.getElementById('live-draw-font-input') as HTMLInputElement;\n     *\n     *      function setText(text: string) {\n     *          user.brushData.customData.text!.text = text;\n     *          networking.sendBrushPacket('text', 'text', text);\n     *      }\n     *\n     *      function setFont(font: string) {\n     *          user.brushData.customData.text!.font = font;\n     *          networking.sendBrushPacket('text', 'font', font);\n     *      }\n     *\n     *      textInput.addEventListener('input', () => {\n     *          setText(textInput.value);\n     *      });\n     *\n     *      fontInput.addEventListener('input', () => {\n     *          setFont(fontInput.value);\n     *      });\n     *  },\n     *  select() {},\n     *  selectLocal() {\n     *      const textInput = document.getElementById('live-draw-text-input') as HTMLInputElement;\n     *      const fontInput = document.getElementById('live-draw-font-input') as HTMLInputElement;\n     *      textInput.style.display = fontInput.style.display = 'block';\n     *  },\n     *  unselectLocal() {\n     *      const textInput = document.getElementById('live-draw-text-input') as HTMLInputElement;\n     *      const fontInput = document.getElementById('live-draw-font-input') as HTMLInputElement;\n     *      textInput.style.display = fontInput.style.display = 'none';\n     *  },\n     *  down() {},\n     *  up(x, y, user, backgroundCanvasCTX) {\n     *      backgroundCanvasCTX.font = (manager.scaleFactor * user.brushData.width +\n     *          'px ' +\n     *          user.brushData.customData.text!.font) as string;\n     *      backgroundCanvasCTX.textAlign = 'left';\n     *      backgroundCanvasCTX.textBaseline = 'top';\n     *      backgroundCanvasCTX.fillText(user.brushData.customData.text!.text as string, x, y);\n     *  },\n     *  move() {\n     *      return true;\n     *  },\n     *  preview(x, y, user, foregroundCanvasCTX) {\n     *      foregroundCanvasCTX.font = (manager.scaleFactor * user.brushData.width +\n     *          'px ' +\n     *          user.brushData.customData.text!.font) as string;\n     *      foregroundCanvasCTX.fillText(user.brushData.customData.text!.text as string, x, y);\n     *  },\n     *  /*,\n     * setFontSize(user, fontSize) {\n     * user.brushData.customData.text.fontSize = fontSize\n     * networking.sendCustomPacket(\"text\", \"fontSize\", fontSize);\n     * }*\n     * },\n     */\n    polygon: {\n        usesCustomData: true,\n        setup(_manager, user) {\n            user.brushData.customData.polygon!.vertices = [];\n        },\n        select() {\n            // noop\n        },\n        down() {\n            // noop\n        },\n        up(_manager, x, y, user) {\n            (user.brushData.customData.polygon!.vertices as Vertex[]).push({ x, y });\n        },\n        move() {\n            return true;\n        },\n        preview(_manager, x, y, user, foregroundCanvasCTX) {\n            const vertices = user.brushData.customData.polygon!.vertices as Vertex[];\n            if (vertices.length === 0) return;\n            const firstVert = vertices[0]!;\n            foregroundCanvasCTX.beginPath();\n            foregroundCanvasCTX.moveTo(firstVert.x, firstVert.y);\n            for (let i = 1; vertices.length > i; ++i) foregroundCanvasCTX.lineTo(vertices[i]!.x, vertices[i]!.y);\n            foregroundCanvasCTX.lineTo(x, y);\n            foregroundCanvasCTX.lineTo(firstVert.x, firstVert.y);\n            foregroundCanvasCTX.fill();\n        },\n        doubleClick(_manager, _x, _y, user, backgroundCanvasCTX) {\n            backgroundCanvasCTX.strokeStyle = user.brushData.color;\n\n            const vertices = user.brushData.customData.polygon!.vertices as Vertex[];\n            if (vertices.length === 0) return;\n            const firstVert = vertices[0]!;\n            backgroundCanvasCTX.beginPath();\n            backgroundCanvasCTX.moveTo(firstVert.x, firstVert.y);\n            for (let i = 1; vertices.length > i; ++i) backgroundCanvasCTX.lineTo(vertices[i]!.x, vertices[i]!.y);\n            backgroundCanvasCTX.lineTo(firstVert.x, firstVert.y);\n            backgroundCanvasCTX.fill();\n\n            // flush the array\n            user.brushData.customData.polygon!.vertices = [];\n        },\n    },\n};\n\nfunction makeLocalUser(manager: LiveDrawManager): LocalUser {\n    const localUser: LocalUser = {\n        local: true,\n        brushData: {\n            width: 0,\n            color: 'black',\n            brush: paintBrushes.pencil!,\n            customData: {},\n            setWidth(bWidth: number) {\n                if (bWidth === this.width) return;\n                const strWidth = bWidth.toString();\n                this.width = bWidth;\n                manager.sliderSetBrushWidth(bWidth);\n                this.setBrushAttribsLocal();\n                manager.sendDrawEvent(PaintEvent.WIDTH, strWidth);\n            },\n            setColor(bColor: string) {\n                this.color = bColor;\n                this.setBrushAttribsLocal();\n                manager.sendDrawEvent(PaintEvent.COLOR, bColor);\n            },\n            setBrush(brush: string) {\n                this.brush.unselectLocal?.();\n\n                this.brush = paintBrushes[brush]!;\n                manager.backgroundCanvasCTX.globalCompositeOperation = 'source-over';\n\n                if (this.brush.selectLocal) {\n                    this.brush.selectLocal(\n                        manager,\n                        localUser,\n                        manager.foregroundCanvasCTX,\n                        manager.backgroundCanvasCTX,\n                    );\n                }\n\n                this.brush.select(manager, localUser, manager.foregroundCanvasCTX, manager.backgroundCanvasCTX);\n                manager.sendDrawEvent(PaintEvent.BRUSH, brush);\n            },\n            setBrushAttribsLocal() {\n                manager.backgroundCanvasCTX.lineWidth = this.width * manager.scaleFactor;\n                if (localUser.brushData.brush.keepBackgroundStrokeStyle !== true) {\n                    manager.backgroundCanvasCTX.strokeStyle = this.color;\n                }\n\n                manager.backgroundCanvasCTX.fillStyle = this.color;\n\n                manager.foregroundCanvasCTX.strokeStyle = this.color;\n                manager.foregroundCanvasCTX.fillStyle = this.color;\n                if (localUser.brushData.brush.keepLineWidth !== true) {\n                    manager.foregroundCanvasCTX.lineWidth = this.width * manager.scaleFactor;\n                }\n            },\n        },\n        cursorData: {\n            x: 0,\n            y: 0,\n            lastX: 0,\n            lastY: 0,\n        },\n    };\n\n    return localUser;\n}\n\nfunction sign(x: number) {\n    return x ? (x < 0 ? -1 : 1) : 0;\n}\n\nfunction clamp(val: number, min: number, max: number) {\n    return Math.max(min, Math.min(max, val));\n}\n\nexport class LiveDrawManager {\n    public localUser: LocalUser;\n\n    public cursorX = 0;\n    public cursorY = 0;\n    public isDrawing = false;\n    public scaleFactor = 1;\n\n    public defaultFont = '24px Verdana';\n\n    public canvasPos: DOMRect;\n    public imagePattern?: CanvasPattern;\n    public backgroundCanvasCTX: CanvasRenderingContext2D;\n    public foregroundCanvasCTX: CanvasRenderingContext2D;\n    public finalCanvasCTX: CanvasRenderingContext2D;\n    public finalCanvas: HTMLCanvasElement;\n\n    private shouldConnect = false;\n    private socket: WebSocket | undefined = undefined;\n\n    public constructor(\n        canvas: HTMLCanvasElement,\n        private readonly backgroundCanvas: HTMLCanvasElement,\n        private readonly foregroundCanvas: HTMLCanvasElement,\n        public readonly sliderSetBrushWidth: (val: number) => void,\n    ) {\n        this.sliderSetBrushWidth = sliderSetBrushWidth;\n\n        this.backgroundCanvas = backgroundCanvas;\n        this.foregroundCanvas = foregroundCanvas;\n        this.finalCanvas = canvas;\n\n        this.backgroundCanvasCTX = backgroundCanvas.getContext('2d')!;\n        this.foregroundCanvasCTX = foregroundCanvas.getContext('2d')!;\n        this.finalCanvasCTX = canvas.getContext('2d')!;\n\n        this.localUser = makeLocalUser(this);\n        this.canvasPos = canvas.getBoundingClientRect();\n        this.paintCanvas = this.paintCanvas.bind(this);\n\n        this.finalCanvas.addEventListener(\n            'mousedown',\n            (event) => {\n                this.mouseDown(event);\n            },\n            false,\n        );\n\n        this.finalCanvas.addEventListener(\n            'mouseup',\n            (event) => {\n                this.mouseUp(event, this.backgroundCanvasCTX);\n            },\n            false,\n        );\n\n        // FIXME: ??\n        this.finalCanvas.addEventListener(\n            'mousemove',\n            (event) => {\n                this.mouseMove(event, this.backgroundCanvasCTX);\n            },\n            false,\n        );\n\n        this.finalCanvas.addEventListener(\n            'wheel',\n            (event) => {\n                this.mouseScroll(event);\n            },\n            false,\n        );\n\n        this.finalCanvas.addEventListener(\n            'dblclick',\n            (event) => {\n                this.doubleClick(event);\n            },\n            false,\n        );\n    }\n\n    public sendDrawEvent(eventType: PaintEvent, payload: string): void {\n        this.sendRaw(eventType + payload);\n    }\n\n    public setBrush(brush: string): void {\n        this.localUser.brushData.setBrush(brush);\n    }\n\n    public setBrushWidth(width: number): void {\n        this.localUser.brushData.setWidth(width);\n    }\n\n    public setup(file: FileModel, session_id: string): void {\n        this.shouldConnect = true;\n        this.setupColorSelector();\n        this.setupBrushes();\n        this.loadImage(file, session_id);\n    }\n\n    public destroy(): void {\n        this.shouldConnect = false;\n        try {\n            this.socket!.close();\n        } catch {\n            // noop\n        }\n    }\n\n    private sendBrushEvent(eventType: PaintEvent, x: number, y: number): void {\n        this.sendDrawEvent(eventType, `${x}|${y}`);\n    }\n\n    private calcOffsets(event: MouseEvent): [number, number] {\n        let x: number;\n        let y: number;\n\n        if (event.offsetX) {\n            x = event.offsetX;\n            y = event.offsetY;\n        } else {\n            x = event.pageX - this.canvasPos.left;\n            y = event.pageY - this.canvasPos.top;\n        }\n\n        x = Math.round(x);\n        y = Math.round(y);\n        if (x < 0) x = 0;\n        if (y < 0) y = 0;\n\n        return [x, y];\n    }\n\n    private mouseDown(event: MouseEvent) {\n        if (event.button !== 0) {\n            return;\n        }\n\n        event.preventDefault();\n\n        this.isDrawing = true;\n\n        const [offsetX, offsetY] = this.calcOffsets(event);\n\n        const sendX = offsetX / this.scaleFactor;\n        const sendY = offsetY / this.scaleFactor;\n\n        this.localUser.brushData.brush.down(this, offsetX, offsetY, this.localUser);\n        this.sendBrushEvent(PaintEvent.MOUSE_DOWN, sendX, sendY);\n    }\n\n    private mouseUp(event: MouseEvent, backgroundCanvasCTX: CanvasRenderingContext2D) {\n        if (event.button !== 0) {\n            return;\n        }\n\n        event.preventDefault();\n\n        if (!this.isDrawing) {\n            return;\n        }\n\n        this.isDrawing = false;\n\n        const [offsetX, offsetY] = this.calcOffsets(event);\n\n        const sendX = offsetX / this.scaleFactor;\n        const sendY = offsetY / this.scaleFactor;\n\n        this.localUser.brushData.brush.up(this, offsetX, offsetY, this.localUser, backgroundCanvasCTX);\n        this.sendBrushEvent(PaintEvent.MOUSE_UP, sendX, sendY);\n\n        this.localUser.cursorData.lastX = 0;\n        this.localUser.cursorData.lastY = 0;\n    }\n\n    private mouseMove(event: MouseEvent, backgroundCanvasCTX: CanvasRenderingContext2D) {\n        event.preventDefault();\n\n        const [offsetX, offsetY] = this.calcOffsets(event);\n\n        this.cursorX = offsetX;\n        this.cursorY = offsetY;\n\n        const sendX = offsetX / this.scaleFactor;\n        const sendY = offsetY / this.scaleFactor;\n\n        if (!this.isDrawing) {\n            this.sendBrushEvent(PaintEvent.MOUSE_CURSOR, sendX, sendY);\n            return;\n        }\n\n        if (this.localUser.brushData.brush.move(this, offsetX, offsetY, this.localUser, backgroundCanvasCTX)) {\n            this.sendBrushEvent(PaintEvent.MOUSE_CURSOR, sendX, sendY);\n        } else {\n            this.sendBrushEvent(PaintEvent.MOUSE_MOVE, sendX, sendY);\n        }\n    }\n    private mouseScroll(event: WheelEvent) {\n        event.preventDefault();\n        const delta = sign(-event.deltaY) * 2;\n\n        this.localUser.brushData.setWidth(clamp(this.localUser.brushData.width + delta, 1, MAX_BRUSH_WIDTH));\n    }\n    private doubleClick(event: MouseEvent) {\n        event.preventDefault();\n        const [offsetX, offsetY] = this.calcOffsets(event);\n        if (this.localUser.brushData.brush.doubleClick) {\n            this.localUser.brushData.brush.doubleClick(\n                this,\n                offsetX,\n                offsetY,\n                this.localUser,\n                this.backgroundCanvasCTX,\n            );\n        }\n\n        this.cursorX = offsetX;\n        this.cursorY = offsetY;\n\n        const sendX = offsetX / this.scaleFactor;\n        const sendY = offsetY / this.scaleFactor;\n\n        this.sendBrushEvent(PaintEvent.MOUSE_DOUBLE_CLICK, sendX, sendY);\n    }\n\n    private recvRaw(msg: string) {\n        msg = msg.trim();\n        if (msg.length < 1) {\n            return;\n        }\n\n        this.recvDirectEvent(msg.charAt(0) as PaintEvent, msg.slice(1));\n    }\n\n    private recvDirectEvent(eventType: PaintEvent, payload: string) {\n        const commands = payload.split('|');\n        if (eventType === PaintEvent.ERROR) {\n            this.destroy();\n            alert(`Network error: ${commands}\\nPlease refresh this page to rejoin!`);\n            return;\n        }\n\n        switch (eventType) {\n            case PaintEvent.JOIN:\n                const [id, name, widthAsString, color, brush] = commands;\n                const from: RemotePaintUser = {\n                    local: false,\n                    name: name!,\n                    brushData: {\n                        width: Number.parseFloat(widthAsString!),\n                        color: color!,\n                        brush: paintBrushes[brush!]!,\n                        customData: {},\n                    },\n                    cursorData: {\n                        x: Number.parseFloat(commands[5] || '0') * this.scaleFactor,\n                        y: Number.parseFloat(commands[6] || '0') * this.scaleFactor,\n                        lastX: 0,\n                        lastY: 0,\n                    },\n                };\n\n                paintUsers[id!] = from;\n\n                for (const [brush, pBrush] of Object.entries(paintBrushes)) {\n                    if (pBrush.usesCustomData) {\n                        from.brushData.customData[brush] = { ...pBrush.defaultCustomData };\n                    }\n\n                    if (pBrush.setup) {\n                        pBrush.setup(this, from);\n                    }\n                }\n\n                break;\n            case PaintEvent.LEAVE:\n                delete paintUsers[commands[0]!];\n                break;\n            case PaintEvent.IMG_BURST:\n                if (commands[1] === 'r') {\n                    this.sendDrawEvent(\n                        PaintEvent.IMG_BURST,\n                        `${commands[2]}|${this.finalCanvas.toDataURL('image/png').replaceAll(/[\\n\\r]/g, '')}|`,\n                    );\n                } else if (commands[1] === 'a') {\n                    const toSet = new Image();\n                    toSet.addEventListener('load', () => {\n                        this.backgroundCanvasCTX.drawImage(\n                            toSet,\n                            0,\n                            0,\n                            this.finalCanvas.width,\n                            this.finalCanvas.height,\n                        );\n                    });\n\n                    toSet.src = commands[2]!;\n                }\n\n                break;\n            default:\n                this.recvDrawEvent(eventType, commands);\n                break;\n        }\n    }\n\n    private recvDrawEvent(eventType: PaintEvent, payload: string[]) {\n        const from = paintUsers[payload[0]!]!;\n        switch (eventType) {\n            case PaintEvent.MOUSE_CURSOR:\n                from.cursorData.x = Number.parseFloat(payload[1]!) * this.scaleFactor;\n                from.cursorData.y = Number.parseFloat(payload[2]!) * this.scaleFactor;\n                break;\n            case PaintEvent.MOUSE_MOVE:\n            case PaintEvent.MOUSE_DOWN:\n            case PaintEvent.MOUSE_UP:\n            case PaintEvent.MOUSE_DOUBLE_CLICK:\n                this.recvBrushEvent(from, eventType, Number.parseFloat(payload[1]!), Number.parseFloat(payload[2]!));\n                break;\n            case PaintEvent.WIDTH:\n                from.brushData.width = Number.parseFloat(payload[1]!);\n                break;\n            case PaintEvent.COLOR:\n                from.brushData.color = payload[1]!;\n                break;\n            case PaintEvent.CUSTOM:\n                const { customData } = from.brushData;\n                const [brush, key, value] = payload;\n                if (!customData[brush!]) {\n                    customData[brush!] = {};\n                }\n\n                from.brushData.customData[brush!]![key!] = value!;\n                break;\n            case PaintEvent.BRUSH:\n                from.brushData.brush = paintBrushes[payload[1]!]!;\n                break;\n            case PaintEvent.RESET:\n                break;\n            default:\n                // noop\n                break;\n        }\n    }\n    private recvBrushEvent(from: User, eventType: PaintEvent, x: number, y: number) {\n        x *= this.scaleFactor;\n        y *= this.scaleFactor;\n        from.cursorData.x = x;\n        from.cursorData.y = y;\n\n        const { brush } = from.brushData;\n        this.backgroundCanvasCTX.lineWidth = from.brushData.width * this.scaleFactor; // Needed in order to draw correctly\n        this.backgroundCanvasCTX.strokeStyle = from.brushData.color;\n        this.backgroundCanvasCTX.fillStyle = from.brushData.color;\n\n        brush.select(this, from, this.foregroundCanvasCTX, this.backgroundCanvasCTX);\n\n        switch (eventType) {\n            case PaintEvent.MOUSE_DOWN:\n                brush.down(this, x, y, from);\n                break;\n            case PaintEvent.MOUSE_UP:\n                brush.up(this, x, y, from, this.backgroundCanvasCTX);\n                break;\n            case PaintEvent.MOUSE_MOVE:\n                brush.move(this, x, y, from, this.backgroundCanvasCTX);\n                break;\n            case PaintEvent.MOUSE_DOUBLE_CLICK:\n                brush.doubleClick!(this, x, y, from, this.backgroundCanvasCTX);\n                break;\n        }\n\n        this.localUser.brushData.setBrushAttribsLocal();\n\n        this.localUser.brushData.brush.select(this, from, this.foregroundCanvasCTX, this.backgroundCanvasCTX);\n    }\n    /*\n     *private sendBrushPacket(brushName: string, key: string, val: string) {\n     *    this.sendRaw(`${PaintEvent.CUSTOM + brushName}|${key}|${val}`);\n     *}\n     */\n    private async netConnect(oldSocket: WebSocket | undefined, file: FileModel, session_id: string) {\n        if (!this.shouldConnect) {\n            return;\n        }\n\n        if (oldSocket && oldSocket !== this.socket) {\n            return;\n        }\n\n        this.socket?.close();\n\n        try {\n            const res = await fetch(\n                `/api/v1/files/${encodeURIComponent(file.id)}/livedraw?session=${encodeURIComponent(session_id)}`,\n            );\n\n            const data = await res.json();\n            const webSocket = new WebSocket(data.url);\n\n            webSocket.onmessage = (event) => {\n                if (!this.shouldConnect) {\n                    webSocket.close();\n                    return;\n                }\n\n                this.recvRaw(event.data);\n            };\n\n            webSocket.addEventListener('close', () => {\n                // Unwanted disconnect\n                if (!this.shouldConnect) {\n                    return;\n                }\n\n                window.setTimeout(async () => this.netConnect(webSocket, file, session_id), 1000);\n                webSocket.close();\n            });\n\n            webSocket.addEventListener('open', () => {\n                this.localUser.brushData.setColor('black');\n                this.localUser.brushData.setWidth(10);\n                this.localUser.brushData.setBrush('brush');\n            });\n\n            this.socket = webSocket;\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    private sendRaw(msg: string) {\n        msg = msg.trim();\n        if (msg.length === 0) {\n            return;\n        }\n\n        try {\n            this.socket!.send(msg);\n        } catch {}\n    }\n\n    private paintCanvas() {\n        if (!this.shouldConnect) {\n            return;\n        }\n\n        requestAnimationFrame(this.paintCanvas);\n        if (!this.localUser.brushData.brush) {\n            return;\n        }\n\n        this.foregroundCanvasCTX.clearRect(0, 0, this.foregroundCanvas.width, this.foregroundCanvas.height);\n\n        this.localUser.brushData.brush.select(this, this.localUser, this.foregroundCanvasCTX, this.backgroundCanvasCTX);\n        this.localUser.brushData.brush.preview(\n            this,\n            this.cursorX,\n            this.cursorY,\n            this.localUser,\n            this.foregroundCanvasCTX,\n        );\n\n        this.foregroundCanvasCTX.textAlign = 'left';\n        this.foregroundCanvasCTX.textBaseline = 'top';\n\n        for (const user of Object.values(paintUsers)) {\n            user.brushData.brush.select(this, user, this.foregroundCanvasCTX, this.backgroundCanvasCTX);\n            user.brushData.brush.preview(this, user.cursorData.x, user.cursorData.y, user, this.foregroundCanvasCTX);\n\n            this.foregroundCanvasCTX.font = this.defaultFont;\n            this.foregroundCanvasCTX.fillText(\n                user.name,\n                user.cursorData.x + user.brushData.width,\n                user.cursorData.y + user.brushData.width,\n            );\n        }\n\n        this.finalCanvasCTX.clearRect(0, 0, this.finalCanvas.width, this.finalCanvas.height);\n\n        this.finalCanvasCTX.drawImage(this.backgroundCanvas, 0, 0);\n        this.finalCanvasCTX.drawImage(this.foregroundCanvas, 0, 0);\n\n        this.localUser.brushData.brush.select(this, this.localUser, this.foregroundCanvasCTX, this.backgroundCanvasCTX);\n    }\n\n    private loadImage(file: FileModel, session_id: string) {\n        const baseImage = new Image();\n        baseImage.crossOrigin = 'anonymous';\n\n        baseImage.addEventListener('load', () => {\n            const maxWidth = document.getElementById('livedraw-wrapper')!.getBoundingClientRect().width;\n\n            this.scaleFactor = baseImage.width > maxWidth ? maxWidth / baseImage.width : 1;\n\n            this.defaultFont = `${12 / this.scaleFactor}px Verdana`;\n\n            this.netConnect(undefined, file, session_id);\n\n            // eslint-disable-next-line no-multi-assign\n            this.backgroundCanvas.width = this.foregroundCanvas.width = this.finalCanvas.width = baseImage.width;\n            // eslint-disable-next-line no-multi-assign\n            this.backgroundCanvas.height = this.foregroundCanvas.height = this.finalCanvas.height = baseImage.height;\n\n            this.finalCanvas.style.width = `${this.finalCanvas.width * this.scaleFactor}px`;\n            this.finalCanvas.style.height = `${this.finalCanvas.height * this.scaleFactor}px`;\n\n            this.canvasPos = this.finalCanvas.getBoundingClientRect();\n\n            this.backgroundCanvasCTX.drawImage(baseImage, 0, 0);\n\n            this.imagePattern = this.backgroundCanvasCTX.createPattern(baseImage, 'no-repeat')!;\n\n            requestAnimationFrame(this.paintCanvas);\n        });\n\n        baseImage.src = file.direct_url;\n    }\n\n    private setupColorSelector() {\n        const hlSelector = document.getElementById('color-selector')!;\n        const hlSelectorMarker = document.getElementById('color-selector-inner')!;\n        const sSelector = document.getElementById('saturation-selector')!;\n        const sSelectorMarker = document.getElementById('saturation-selector-inner')!;\n        const oSelector = document.getElementById('opacity-selector')!;\n        const oSelectorMarker = document.getElementById('opacity-selector-inner')!;\n\n        let hue = 0;\n        let saturation = 100;\n        let lightness = 0;\n        let opacity = 1;\n\n        let hlSelectorDown: boolean;\n        let sSelectorDown: boolean;\n        let oSelectorDown: boolean;\n\n        const setHSLColor = (h: number, s: number, l: number, o: number) => {\n            this.localUser.brushData.setColor(\n                (hlSelector.style.outlineColor =\n                    sSelector.style.outlineColor =\n                    oSelector.style.outlineColor =\n                        `hsla(${h}, ${s}%, ${l}%, ${o})`),\n            );\n        };\n\n        let hlSelectorMouseMoveListener: (this: HTMLElement, event: MouseEvent) => void;\n        let sSelectorMouseMoveListener: (this: HTMLElement, event: MouseEvent) => void;\n        let oSelectorMouseMoveListener: (this: HTMLElement, event: MouseEvent) => void;\n\n        hlSelector.addEventListener('mousedown', (event) => {\n            if (event.button === 0) {\n                hlSelectorDown = true;\n                hlSelectorMouseMoveListener.call(hlSelector, event);\n            }\n        });\n\n        hlSelector.addEventListener('mouseup', (event) => {\n            if (event.button === 0) hlSelectorDown = false;\n        });\n\n        hlSelector.addEventListener(\n            'mousemove',\n            (hlSelectorMouseMoveListener = (event) => {\n                if (!hlSelectorDown) {\n                    return;\n                }\n\n                hue = (event.offsetX / hlSelector.offsetWidth) * 360;\n                lightness = (event.offsetY / hlSelector.offsetHeight) * 100;\n\n                const buildStr = `-webkit-linear-gradient(top, hsl(${hue}, 100%, ${lightness}%), hsl`;\n                sSelector.style.backgroundImage = `${buildStr}(${hue}, 0%, ${lightness}%))`;\n                oSelector.style.backgroundImage = `${buildStr}a(${hue}, 0%, ${lightness}%, ${opacity}))`;\n\n                hlSelectorMarker.style.left = `${event.offsetX - 5}px`;\n                hlSelectorMarker.style.top = `${event.offsetY - 5}px`;\n\n                setHSLColor(hue, saturation, lightness, opacity);\n            }),\n        );\n\n        sSelector.addEventListener('mousedown', (event) => {\n            if (event.button === 0) {\n                sSelectorDown = true;\n                sSelectorMouseMoveListener.call(sSelector, event);\n            }\n        });\n\n        sSelector.addEventListener('mouseup', (event) => {\n            if (event.button === 0) sSelectorDown = false;\n        });\n\n        sSelector.addEventListener(\n            'mousemove',\n            (sSelectorMouseMoveListener = (event) => {\n                if (!sSelectorDown) {\n                    return;\n                }\n\n                saturation = (1 - event.offsetY / sSelector.offsetHeight) * 100;\n\n                sSelectorMarker.style.top = `${event.offsetY}px`;\n\n                hlSelector.style.backgroundImage =\n                    `-webkit-linear-gradient(top, black, transparent, white),` +\n                    `-webkit-linear-gradient(left, hsl(0, ${saturation}%, 50%), hsl(60, ${saturation}%, 50%), hsl(120, ${saturation}%, 50%),` +\n                    `hsl(180, ${saturation}%, 50%), hsl(240, ${saturation}%, 50%), hsl(300, ${saturation}%, 50%), hsl(0, ${saturation}%, 50%))`;\n\n                setHSLColor(hue, saturation, lightness, opacity);\n            }),\n        );\n\n        oSelector.addEventListener('mousedown', (event) => {\n            if (event.button === 0) {\n                oSelectorDown = true;\n                oSelectorMouseMoveListener.call(oSelector, event);\n            }\n        });\n\n        oSelector.addEventListener('mouseup', (event) => {\n            if (event.button === 0) oSelectorDown = false;\n        });\n\n        oSelector.addEventListener(\n            'mousemove',\n            (oSelectorMouseMoveListener = (event) => {\n                if (!oSelectorDown) {\n                    return;\n                }\n\n                opacity = 1 - event.offsetY / oSelector.offsetHeight;\n\n                oSelectorMarker.style.top = `${event.offsetY}px`;\n\n                setHSLColor(hue, saturation, lightness, opacity);\n            }),\n        );\n    }\n\n    private setupBrushes() {\n        for (const [brush, pBrush] of Object.entries(paintBrushes)) {\n            if (pBrush.usesCustomData) {\n                this.localUser.brushData.customData[brush] = {\n                    ...pBrush.defaultCustomData,\n                };\n            }\n\n            if (pBrush.setup) {\n                pBrush.setup(this, this.localUser);\n            }\n        }\n    }\n}\n","/Users/doridian/Programming/foxCaves/site/frontend/src/pages/livedraw/page.tsx",[],[],"/Users/doridian/Programming/foxCaves/site/frontend/src/pages/login.tsx",[],[],"/Users/doridian/Programming/foxCaves/site/frontend/src/pages/logout.tsx",[],[],"/Users/doridian/Programming/foxCaves/site/frontend/src/pages/register.tsx",[],[],"/Users/doridian/Programming/foxCaves/site/frontend/src/pages/view.tsx",[],[],"/Users/doridian/Programming/foxCaves/site/frontend/src/react-app-env.d.ts",[],[],"/Users/doridian/Programming/foxCaves/site/frontend/src/setupProxy.ts",[],["202"],"/Users/doridian/Programming/foxCaves/site/frontend/src/utils/api.ts",[],[],"/Users/doridian/Programming/foxCaves/site/frontend/src/utils/context.ts",[],[],"/Users/doridian/Programming/foxCaves/site/frontend/src/utils/file_uploader.ts",[],[],"/Users/doridian/Programming/foxCaves/site/frontend/src/utils/formatting.ts",[],[],"/Users/doridian/Programming/foxCaves/site/frontend/src/utils/hooks.ts",[],[],"/Users/doridian/Programming/foxCaves/site/frontend/src/utils/misc.ts",[],["203"],"/Users/doridian/Programming/foxCaves/site/frontend/src/utils/random.ts",[],[],"/Users/doridian/Programming/foxCaves/site/frontend/src/utils/websocket_autoreconnect.ts",[],[],{"ruleId":"204","severity":2,"message":"205","line":68,"column":9,"nodeType":"206","messageId":"207","endLine":171,"endColumn":10,"suppressions":"208"},{"ruleId":"209","severity":2,"message":"210","line":17,"column":5,"nodeType":"211","messageId":"212","endLine":17,"endColumn":17,"suppressions":"213"},{"ruleId":"214","severity":2,"message":"215","line":775,"column":13,"nodeType":"216","messageId":"212","endLine":775,"endColumn":85},{"ruleId":"217","severity":2,"message":"218","line":775,"column":37,"nodeType":"219","messageId":"220","endLine":775,"endColumn":45},{"ruleId":"221","severity":2,"message":"222","line":792,"column":58,"nodeType":"223","messageId":"224","endLine":792,"endColumn":60,"suggestions":"225"},{"ruleId":"221","severity":2,"message":"222","line":793,"column":58,"nodeType":"223","messageId":"224","endLine":793,"endColumn":60,"suggestions":"226"},{"ruleId":"227","severity":2,"message":"228","line":801,"column":29,"nodeType":"219","messageId":"229","endLine":801,"endColumn":34},{"ruleId":"230","severity":2,"message":"231","line":813,"column":35,"nodeType":"232","messageId":"233","endLine":813,"endColumn":47},{"ruleId":"217","severity":2,"message":"234","line":819,"column":28,"nodeType":"211","messageId":"220","endLine":819,"endColumn":39},{"ruleId":"235","severity":2,"message":"236","line":869,"column":17,"nodeType":"211","messageId":"237","endLine":869,"endColumn":42},{"ruleId":"235","severity":2,"message":"236","line":888,"column":46,"nodeType":"211","messageId":"237","endLine":888,"endColumn":66,"suggestions":"238"},{"ruleId":"239","severity":2,"message":"240","line":888,"column":87,"nodeType":"241","messageId":"242","endLine":888,"endColumn":123},{"ruleId":"243","severity":2,"message":"244","line":888,"column":87,"nodeType":"241","messageId":"245","endLine":888,"endColumn":123},{"ruleId":"235","severity":2,"message":"236","line":889,"column":48,"nodeType":"211","messageId":"237","endLine":889,"endColumn":68,"suggestions":"246"},{"ruleId":"235","severity":2,"message":"236","line":890,"column":46,"nodeType":"211","messageId":"237","endLine":890,"endColumn":66,"suggestions":"247"},{"ruleId":"248","severity":2,"message":"249","line":894,"column":17,"nodeType":"219","messageId":"250","endLine":894,"endColumn":26,"suggestions":"251"},{"ruleId":"252","severity":2,"message":"253","line":934,"column":19,"nodeType":"254","messageId":"255","endLine":934,"endColumn":42},{"ruleId":"256","severity":2,"message":"257","line":935,"column":45,"nodeType":"211","messageId":"258","endLine":935,"endColumn":53},{"ruleId":"259","severity":2,"message":"260","line":935,"column":45,"nodeType":"211","messageId":"261","endLine":935,"endColumn":53},{"ruleId":"262","severity":2,"message":"263","line":937,"column":23,"nodeType":"219","messageId":"264","endLine":937,"endColumn":32},{"ruleId":"256","severity":2,"message":"265","line":943,"column":30,"nodeType":"211","messageId":"258","endLine":943,"endColumn":40},{"ruleId":"266","severity":2,"message":"267","line":952,"column":35,"nodeType":"206","messageId":"268","endLine":952,"endColumn":91},{"ruleId":"209","severity":2,"message":"210","line":964,"column":13,"nodeType":"211","messageId":"212","endLine":964,"endColumn":26},{"ruleId":"269","severity":2,"message":"270","line":976,"column":17,"nodeType":"271","messageId":"212","endLine":976,"endColumn":19,"suggestions":"272"},{"ruleId":"273","severity":2,"message":"274","line":984,"column":31,"nodeType":"211","messageId":"275","endLine":984,"endColumn":47},{"ruleId":"276","severity":2,"message":"277","line":985,"column":14,"nodeType":"211","messageId":"278","endLine":985,"endColumn":44},{"ruleId":"279","severity":2,"message":"280","line":1034,"column":13,"nodeType":"281","messageId":"282","endLine":1034,"endColumn":58,"suggestions":"283"},{"ruleId":"273","severity":2,"message":"274","line":1050,"column":35,"nodeType":"211","messageId":"275","endLine":1050,"endColumn":51},{"ruleId":"284","severity":2,"message":"285","line":1076,"column":21,"nodeType":"286","messageId":"287","endLine":1078,"endColumn":57},{"ruleId":"284","severity":2,"message":"285","line":1077,"column":21,"nodeType":"286","messageId":"287","endLine":1078,"endColumn":57},{"ruleId":"288","severity":2,"message":"289","line":781,"column":17,"nodeType":"290","messageId":"212","endLine":781,"endColumn":74,"suppressions":"291"},{"ruleId":"288","severity":2,"message":"289","line":782,"column":17,"nodeType":"290","messageId":"212","endLine":797,"endColumn":19,"suppressions":"292"},{"ruleId":"288","severity":2,"message":"289","line":863,"column":17,"nodeType":"290","messageId":"212","endLine":863,"endColumn":55,"suppressions":"293"},{"ruleId":"288","severity":2,"message":"289","line":864,"column":17,"nodeType":"290","messageId":"212","endLine":864,"endColumn":53,"suppressions":"294"},{"ruleId":"295","severity":2,"message":"296","line":1001,"column":1,"nodeType":null,"messageId":"297","endLine":1190,"endColumn":1,"suppressions":"298"},{"ruleId":"284","severity":2,"message":"285","line":1037,"column":43,"nodeType":"286","messageId":"287","endLine":1037,"endColumn":113,"suppressions":"299"},{"ruleId":"284","severity":2,"message":"285","line":1037,"column":73,"nodeType":"286","messageId":"287","endLine":1037,"endColumn":113,"suppressions":"300"},{"ruleId":"284","severity":2,"message":"285","line":1039,"column":44,"nodeType":"286","messageId":"287","endLine":1039,"endColumn":117,"suppressions":"301"},{"ruleId":"284","severity":2,"message":"285","line":1039,"column":75,"nodeType":"286","messageId":"287","endLine":1039,"endColumn":117,"suppressions":"302"},{"ruleId":"303","severity":2,"message":"304","line":12,"column":1,"nodeType":"219","messageId":"305","endLine":12,"endColumn":7,"suggestions":"306","suppressions":"307"},{"ruleId":"209","severity":2,"message":"210","line":6,"column":5,"nodeType":"211","messageId":"212","endLine":6,"endColumn":18,"suppressions":"308"},"complexity","Arrow function has a complexity of 21. Maximum allowed is 20.","ArrowFunctionExpression","complex",["309"],"no-console","Unexpected console statement.","MemberExpression","unexpected",["310"],"no-alert","Unexpected alert.","CallExpression","@typescript-eslint/restrict-template-expressions","Invalid type \"string[]\" of template literal expression.","Identifier","invalidType","@typescript-eslint/prefer-nullish-coalescing","Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","Punctuator","preferNullishOverOr",["311"],["312"],"@typescript-eslint/no-shadow","'brush' is already declared in the upper scope on line 781 column 56.","noShadow","@typescript-eslint/no-dynamic-delete","Do not delete dynamically computed property keys.","TSNonNullExpression","dynamicDelete","Invalid type \"string | undefined\" of template literal expression.","unicorn/consistent-destructuring","Use destructured variables over properties.","consistentDestructuring",["313"],"no-inline-comments","Unexpected comment inline with code.","Line","unexpectedInlineComment","line-comment-position","Expected comment to be above code.","above",["314"],["315"],"@typescript-eslint/switch-exhaustiveness-check","Switch is not exhaustive. Cases not matched: PaintEvent.WIDTH | PaintEvent.COLOR | PaintEvent.BRUSH | PaintEvent.MOUSE_CURSOR | PaintEvent.CUSTOM | PaintEvent.RESET | PaintEvent.JOIN | PaintEvent.LEAVE | PaintEvent.ERROR | PaintEvent.IMG_BURST","switchIsNotExhaustive",["316"],"@typescript-eslint/no-unsafe-assignment","Unsafe assignment of an `any` value.","VariableDeclarator","anyAssignment","@typescript-eslint/no-unsafe-argument","Unsafe argument of type `any` assigned to a parameter of type `string | URL`.","unsafeArgument","@typescript-eslint/no-unsafe-member-access","Unsafe member access .url on an `any` value.","unsafeMemberExpression","unicorn/prefer-add-event-listener","Prefer `addEventListener` over `onmessage`. Note that there is difference between `SharedWorker#onmessage` and `SharedWorker#addEventListener('message')`.","prefer-add-event-listener","Unsafe argument of type `any` assigned to a parameter of type `string`.","@typescript-eslint/no-misused-promises","Promise returned in function argument where a void return was expected.","voidReturnArgument","no-empty","Empty block statement.","BlockStatement",["317"],"@typescript-eslint/unbound-method","Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","unboundWithoutThisAnnotation","@typescript-eslint/no-unnecessary-condition","Unnecessary conditional, value is always falsy.","alwaysFalsy","@typescript-eslint/no-floating-promises","Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","ExpressionStatement","floatingVoid",["318"],"no-multi-assign","Unexpected chained assignment.","AssignmentExpression","unexpectedChain","no-case-declarations","Unexpected lexical declaration in case block.","VariableDeclaration",["319"],["320"],["321"],["322"],"max-lines","File has too many lines (1189). Maximum allowed is 1000.","exceed",["323"],["324"],["325"],["326"],["327"],"unicorn/prefer-module","Do not use \"module\".","error/identifier",["328"],["329"],["330"],{"kind":"331","justification":"332"},{"kind":"331","justification":"332"},{"messageId":"333","fix":"334","desc":"335"},{"messageId":"333","fix":"336","desc":"335"},{"messageId":"337","data":"338","fix":"339","desc":"340"},{"messageId":"337","data":"341","fix":"342","desc":"343"},{"messageId":"337","data":"344","fix":"345","desc":"343"},{"messageId":"346","fix":"347","desc":"348"},{"messageId":"349","data":"350","fix":"351","desc":"352"},{"messageId":"353","fix":"354","desc":"355"},{"kind":"331","justification":"332"},{"kind":"331","justification":"332"},{"kind":"331","justification":"332"},{"kind":"331","justification":"332"},{"kind":"331","justification":"332"},{"kind":"331","justification":"332"},{"kind":"331","justification":"332"},{"kind":"331","justification":"332"},{"kind":"331","justification":"332"},{"messageId":"356","fix":"357","data":"358","desc":"359"},{"kind":"331","justification":"332"},{"kind":"331","justification":"332"},"directive","","suggestNullish",{"range":"360","text":"361"},"Fix to nullish coalescing operator (`??`).",{"range":"362","text":"361"},"consistentDestructuringSuggest",{"expression":"363","property":"364"},{"range":"365","text":"366"},"Replace `from.brushData.width` with destructured property `width`.",{"expression":"367","property":"368"},{"range":"369","text":"370"},"Replace `from.brushData.color` with destructured property `color`.",{"expression":"367","property":"368"},{"range":"371","text":"372"},"addMissingCases",{"range":"373","text":"374"},"Add branches for missing cases.","suggestComment",{"type":"375"},{"range":"376","text":"377"},"Add comment inside empty block statement.","floatingFixVoid",{"range":"378","text":"379"},"Add void operator to ignore.","suggestion/export",{"range":"380","text":"381"},{"name":"382"},"Switch to `export`.",[26169,26171],"??",[26254,26256],"from.brushData.width","width",[29687,29773],", width } = from.brushData;\n        this.backgroundCanvasCTX.lineWidth = width","from.brushData.color","color",[29687,29898],", color } = from.brushData;\n        this.backgroundCanvasCTX.lineWidth = from.brushData.width * this.scaleFactor; // Needed in order to draw correctly\n        this.backgroundCanvasCTX.strokeStyle = color",[29687,29965],", color } = from.brushData;\n        this.backgroundCanvasCTX.lineWidth = from.brushData.width * this.scaleFactor; // Needed in order to draw correctly\n        this.backgroundCanvasCTX.strokeStyle = from.brushData.color;\n        this.backgroundCanvasCTX.fillStyle = color",[30609,30609],"\n            case PaintEvent.WIDTH: { throw new Error('Not implemented yet: PaintEvent.WIDTH case') }\n            case PaintEvent.COLOR: { throw new Error('Not implemented yet: PaintEvent.COLOR case') }\n            case PaintEvent.BRUSH: { throw new Error('Not implemented yet: PaintEvent.BRUSH case') }\n            case PaintEvent.MOUSE_CURSOR: { throw new Error('Not implemented yet: PaintEvent.MOUSE_CURSOR case') }\n            case PaintEvent.CUSTOM: { throw new Error('Not implemented yet: PaintEvent.CUSTOM case') }\n            case PaintEvent.RESET: { throw new Error('Not implemented yet: PaintEvent.RESET case') }\n            case PaintEvent.JOIN: { throw new Error('Not implemented yet: PaintEvent.JOIN case') }\n            case PaintEvent.LEAVE: { throw new Error('Not implemented yet: PaintEvent.LEAVE case') }\n            case PaintEvent.ERROR: { throw new Error('Not implemented yet: PaintEvent.ERROR case') }\n            case PaintEvent.IMG_BURST: { throw new Error('Not implemented yet: PaintEvent.IMG_BURST case') }","block",[32657,32657]," /* empty */ ",[34819,34819],"void ",[318,335],"export default ","module"]