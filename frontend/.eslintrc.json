{
    "root": true,
    "extends": [
        "eslint:all",
        "plugin:@typescript-eslint/all",
        "plugin:react/all",
        "plugin:import/recommended",
        "plugin:import/typescript",
        "prettier",
        "plugin:unicorn/all"
    ],
    "parserOptions": {
        "project": ["./tsconfig.json"]
    },
    "parser": "@typescript-eslint/parser",
    "plugins": ["@typescript-eslint", "react-hooks", "react", "import", "prettier", "unicorn", "@cspell"],
    "rules": {
        // eslint overrides
        "arrow-body-style": "off",
        "camelcase": "off",
        "class-methods-use-this": "off",
        // covered by prettier
        "max-len": ["error", 200],
        "eol-last": "off",
        "eqeqeq": ["error", "always"],
        "linebreak-style": "off",
        "no-underscore-dangle": "off",
        "no-restricted-imports": [
            "error",
            {
                "paths": [
                    {
                        "name": "lodash",
                        "message": "Only submodule imports are permitted."
                    },
                    {
                        "name": "react-redux",
                        "message": "Only import the hooks from store.ts to avoid store poisoning"
                    }
                ]
            }
        ],
        "no-inline-comments": ["error", { "ignorePattern": "webpack.*?:\\s.+" }],
        // not super useful atm, will be at higher scale
        "sort-imports": [
            "error",
            {
                "ignoreCase": true,
                "ignoreDeclarationSort": true // handled by `import/order`
            }
        ],
        "sort-keys": "off",
        // should be anbled at scale
        "no-warning-comments": "off",
        // no read advantage here
        "func-style": "off",
        "no-ternary": "off",
        // annoying when iterating
        "id-length": "off",
        // generally covered by TS
        "default-case": "off",
        "consistent-return": "off",
        // conflicts with react components that have a lot of logic
        "max-lines-per-function": ["error", 250],
        // keep this super high, we want to reduce this for sure
        "complexity": ["error", 20],
        // Unrealistic
        "no-undefined": "off",
        // ugly foor loops
        "no-plusplus": "off",
        // this is often easier to follow and more convinient
        "no-param-reassign": "off",
        "no-continue": "off",
        // sensible defaults for max values
        "max-statements": ["error", 150],
        "max-lines": ["error", 1000],
        "max-classes-per-file": ["error", 10],
        "max-params": ["error", 6],
        // must be disabled for TS version
        "init-declarations": "off",
        // useful for later
        "require-unicode-regexp": "off",
        "prefer-named-capture-group": "off",
        // used for promise return value suppression
        "no-void": ["error", { "allowAsStatement": true }],
        // style
        // required for TS to work
        "spaced-comment": ["error", "always", { "markers": ["/"] }],
        "capitalized-comments": "off",
        "object-curly-newline": "off",
        "one-var-declaration-per-line": "error",
        "no-implicit-coercion": [2, { "allow": ["!!"] }],
        "one-var": ["error", "never"],
        "padded-blocks": "off",
        "prefer-arrow-callback": "error",
        "prefer-const": "error",
        "prefer-destructuring": "error",

        // import pugin rules
        "import/export": "error",
        "import/no-default-export": "error",
        "import/extensions": [
            "error",
            {
                "pattern": {
                    "scss": "always",
                    "otf": "always"
                }
            }
        ],
        "import/no-duplicates": "error",
        "import/no-dynamic-require": "error",
        "import/no-extraneous-dependencies": "error",
        "import/no-unresolved": "error",
        "import/no-unused-modules": [
            "error",
            {
                "unusedExports": true
            }
        ],
        "import/order": [
            "error",
            {
                "alphabetize": {
                    "order": "asc"
                },
                "newlines-between": "never"
            }
        ],

        // prettier
        "prettier/prettier": "error",

        // react rules
        "react-hooks/exhaustive-deps": "error",
        "react-hooks/rules-of-hooks": "error",
        // this is great but has too many false positives
        "react/jsx-no-leaked-render": "off",
        "react/destructuring-assignment": "error",
        // It is often desirable to pass className
        "react/forbid-component-props": "off",
        "react/jsx-curly-brace-presence": [
            "error",
            { "props": "never", "children": "never", "propElementValues": "always" }
        ],
        "react/jsx-filename-extension": ["error", { "extensions": [".tsx"] }],
        "react/function-component-definition": [
            "error",
            {
                "namedComponents": "arrow-function",
                "unnamedComponents": "arrow-function"
            }
        ],
        "react/jsx-key": "error",
        "react/jsx-max-depth": [
            "error",
            {
                "max": 8
            }
        ],
        "react/jsx-no-bind": "error",
        // Reserved for future i18n use
        "react/jsx-no-literals": "off",
        // We use this relatively often hen passing through arbitray properties to chidren
        // and there isn't much of a downside using this with TS
        "react/jsx-props-no-spreading": "off",
        "react/jsx-sort-props": "error",
        "react/jsx-wrap-multilines": "error",
        "react/no-array-index-key": "error",
        // We often break out tiny helper components
        // that are highly specialised, it often
        // doesn't make sense to split them into different files
        "react/no-multi-comp": "off",
        "react/no-unstable-nested-components": "error",
        // generally not useful as TS covers undeclared props
        // this also causes issues w/ forwardRef etc.
        "react/prop-types": "off",
        // Not useful as often use `undefined` or optionals
        "react/require-default-props": "off",
        // We don't use functional components
        "react/sort-comp": "off",
        "react/no-unescaped-entities": ["error", { "forbid": [">", "}"] }],
        "no-else-return": [
            "error",
            {
                "allowElseIf": false
            }
        ],

        // typescript-eslint rules

        // Probably not turning these on
        // We deal with a lot of snake case due to API, this would be rather annoying
        "@typescript-eslint/naming-convention": "off",
        // This is kinda useless and prevents type aliasing.
        "@typescript-eslint/no-type-alias": "off",
        // This is a nice feature of TS, unsure why we would ban this
        "@typescript-eslint/no-parameter-properties": "off",
        // Waay too many false positives where the behavior is desired and concise
        "@typescript-eslint/strict-boolean-expressions": "off",

        // Style heavy
        "@typescript-eslint/lines-between-class-members": "off",
        "@typescript-eslint/prefer-enum-initializers": "off",
        "@typescript-eslint/padding-line-between-statements": [
            "error",
            {
                "prev": [
                    "multiline-block-like",
                    "multiline-const",
                    "multiline-expression",
                    "multiline-let",
                    "multiline-var"
                ],
                "next": "*",
                "blankLine": "always"
            }
        ],

        // Potentially turning these on
        "@typescript-eslint/prefer-readonly-parameter-types": "off",
        "@typescript-eslint/explicit-function-return-type": "off",
        //"@typescript-eslint/no-magic-numbers": [
        //  "error",
        //  { "ignore": [-1, 0, 1, 2, 1000] }
        //],
        "@typescript-eslint/no-magic-numbers": "off",
        "@typescript-eslint/consistent-type-imports": "off",
        "@typescript-eslint/sort-type-union-intersection-members": "off",
        "@typescript-eslint/no-non-null-assertion": "off",
        // Enforced by TS
        "@typescript-eslint/init-declarations": "off",
        "@typescript-eslint/no-use-before-define": "off",
        "@typescript-eslint/method-signature-style": "off",

        // Disabling any type safety is error, do not do this, use type assertions if you have to.
        "@typescript-eslint/ban-ts-comment": [
            "error",
            {
                "ts-expect-error": true,
                "ts-ignore": true,
                "ts-nocheck": true,
                "ts-check": true
            }
        ],

        // yup
        "@typescript-eslint/member-ordering": "error",
        "@typescript-eslint/no-shadow": [
            "error",
            {
                "ignoreTypeValueShadow": true
            }
        ],

        "@typescript-eslint/no-explicit-any": [
            "error",
            {
                "ignoreRestArgs": true
            }
        ],
        "@typescript-eslint/explicit-module-boundary-types": "error",
        "@typescript-eslint/no-unnecessary-condition": [
            "error",
            {
                "allowConstantLoopConditions": true
            }
        ],
        "@typescript-eslint/no-unsafe-assignment": "error",
        "@typescript-eslint/no-unsafe-call": "error",
        "@typescript-eslint/no-unsafe-member-access": "error",
        "@typescript-eslint/no-unsafe-return": "error",
        "@typescript-eslint/no-unnecessary-type-assertion": "error",
        "@typescript-eslint/restrict-template-expressions": "error",
        "@typescript-eslint/no-unsafe-argument": "error",
        "@typescript-eslint/restrict-plus-operands": "error",
        "@typescript-eslint/parameter-properties": ["error", { "prefer": "parameter-property" }],

        // unicorn
        // this is good but generates too much noise for now
        "unicorn/prevent-abbreviations": "off",
        // annoying
        "unicorn/no-await-expression-member": "off",
        // later!
        "unicorn/filename-case": "off",
        // prefer prettier
        "unicorn/number-literal-case": "off",
        // maybe later
        "unicorn/explicit-length-check": "off",
        // meh
        "unicorn/no-array-callback-reference": "off",
        // performance
        "unicorn/prefer-query-selector": "off",
        // generally agree with the rules purpose but there is no perf critical code atm
        "unicorn/no-array-reduce": "off",
        "unicorn/prefer-spread": "off",
        // annoying with react states
        "unicorn/no-useless-undefined": "off",
        // annoying when wanting to pre-alloc
        "unicorn/no-new-array": "off",
        // should be enabled at some point
        "unicorn/no-document-cookie": "error",
        // wish this could be enabled but nope, react uses null rather extensively
        "unicorn/no-null": "off",
        "unicorn/custom-error-definition": "error",
        "unicorn/no-unsafe-regex": "error",
        // nope
        "unicorn/switch-case-braces": "off",
        // this rule is mostly useful when not using TS
        "unicorn/no-keyword-prefix": "off",

        "@cspell/spellchecker": [
            "error",
            {
                "customWordListFile": "./words.txt"
            }
        ]
    },
    "settings": {
        "react": {
            "version": "17.0.2"
        },
        "import/resolver": {
            "node": {
                "extensions": [".js", ".jsx", ".ts", ".tsx"]
            }
        }
    }
}
